# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1


jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build:
    environment:
      CC_TEST_REPORTER_ID: c8f294cd54feece3273291ddb744d3189db1d3eaa5cf10073e54e171fcd140ea
    docker:
      - image: "mileschou/xdebug:7.3"
    working_directory: ~/repo
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn 
      - run:
          name: Install dependencies
          command: yarn install
      - run: 
          name: Run frontend testss
          command: |
            yarn test:ci
            ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.frontend.json coverage/lcov.info
      - persist_to_workspace:
          root: tmp
          paths: 
            - codeclimate.frontend.json
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run tests
          command: |
            sudo docker-php-ext-enable xdebug
            ./cc-test-reporter before-build
            sudo vendor/bin/phpunit --coverage-clover clover.xml
            ./cc-test-reporter after-build --coverage-input-type clover --exit-code $?
  install-test-build:  
    environment:
      CC_TEST_REPORTER_ID: c8f294cd54feece3273291ddb744d3189db1d3eaa5cf10073e54e171fcd140ea
    docker:
      - image: cimg/node:14.1
    working_directory: ~/repo
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      # - node/install-packages
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      - node/install-packages:
          pkg-manager: yarn 
      - run:
          name: Install dependencies
          command: yarn install
      # - run:
      #     name: Run all tests
      #     command: yarn test
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - run: 
          name: Run frontend testss
          command: |
            yarn test:ci
            ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.frontend.json coverage/lcov.info
      - run:
          name: Generate build
          command: yarn build

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - install-test-build
      # - build
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test
